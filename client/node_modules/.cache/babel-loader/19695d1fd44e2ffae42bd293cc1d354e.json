{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useThemeVariants } from '@material-ui/styles';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      margin: 0\n    },\n\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n\n    /* Styles applied to the root element if `variant=\"inherit\"`. */\n    inherit: {},\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `nowrap={true}`. */\n    noWrap: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `gutterBottom={true}`. */\n    gutterBottom: {\n      marginBottom: '0.35em'\n    },\n\n    /* Styles applied to the root element if `paragraph={true}`. */\n    paragraph: {\n      marginBottom: 16\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"textPrimary\"`. */\n    colorTextPrimary: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `color=\"textSecondary\"`. */\n    colorTextSecondary: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `display=\"inline\"`. */\n    displayInline: {\n      display: 'inline'\n    },\n\n    /* Styles applied to the root element if `display=\"block\"`. */\n    displayBlock: {\n      display: 'block'\n    }\n  };\n};\nvar defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n  inherit: 'p'\n};\nvar Typography = /*#__PURE__*/React.forwardRef(function Typography(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'initial' : _props$color,\n      component = props.component,\n      _props$display = props.display,\n      display = _props$display === void 0 ? 'initial' : _props$display,\n      _props$gutterBottom = props.gutterBottom,\n      gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,\n      _props$noWrap = props.noWrap,\n      noWrap = _props$noWrap === void 0 ? false : _props$noWrap,\n      _props$paragraph = props.paragraph,\n      paragraph = _props$paragraph === void 0 ? false : _props$paragraph,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'body1' : _props$variant,\n      _props$variantMapping = props.variantMapping,\n      variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  var themeVariantsClasses = useThemeVariants(_extends({}, props, {\n    align: align,\n    color: color,\n    display: display,\n    gutterBottom: gutterBottom,\n    noWrap: noWrap,\n    paragraph: paragraph,\n    variant: variant,\n    variantMapping: variantMapping\n  }), 'MuiTypography');\n  var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes[variant], themeVariantsClasses, className, color !== 'initial' && classes[\"color\".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], display !== 'initial' && classes[\"display\".concat(capitalize(display))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['error', 'inherit', 'initial', 'primary', 'secondary', 'textPrimary', 'textSecondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['block', 'initial', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);","map":{"version":3,"sources":["/Users/katialishnevsky/Desktop/Fullstack/fullstack2h/juniorDevelopersJobs/client/node_modules/@material-ui/core/esm/Typography/Typography.js"],"names":["_extends","_objectWithoutProperties","React","PropTypes","clsx","useThemeVariants","withStyles","capitalize","styles","theme","root","margin","body2","typography","body1","caption","button","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","overline","inherit","alignLeft","textAlign","alignCenter","alignRight","alignJustify","noWrap","overflow","textOverflow","whiteSpace","gutterBottom","marginBottom","paragraph","colorInherit","color","colorPrimary","palette","primary","main","colorSecondary","secondary","colorTextPrimary","text","colorTextSecondary","colorError","error","displayInline","display","displayBlock","defaultVariantMapping","Typography","forwardRef","props","ref","_props$align","align","classes","className","_props$color","component","_props$display","_props$gutterBottom","_props$noWrap","_props$paragraph","_props$variant","variant","_props$variantMapping","variantMapping","other","themeVariantsClasses","Component","createElement","concat","process","env","NODE_ENV","propTypes","oneOf","children","node","object","string","elementType","bool","oneOfType","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { useThemeVariants } from '@material-ui/styles';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      margin: 0\n    },\n\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n\n    /* Styles applied to the root element if `variant=\"inherit\"`. */\n    inherit: {},\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `nowrap={true}`. */\n    noWrap: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `gutterBottom={true}`. */\n    gutterBottom: {\n      marginBottom: '0.35em'\n    },\n\n    /* Styles applied to the root element if `paragraph={true}`. */\n    paragraph: {\n      marginBottom: 16\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"textPrimary\"`. */\n    colorTextPrimary: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `color=\"textSecondary\"`. */\n    colorTextSecondary: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `display=\"inline\"`. */\n    displayInline: {\n      display: 'inline'\n    },\n\n    /* Styles applied to the root element if `display=\"block\"`. */\n    displayBlock: {\n      display: 'block'\n    }\n  };\n};\nvar defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p',\n  inherit: 'p'\n};\nvar Typography = /*#__PURE__*/React.forwardRef(function Typography(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'initial' : _props$color,\n      component = props.component,\n      _props$display = props.display,\n      display = _props$display === void 0 ? 'initial' : _props$display,\n      _props$gutterBottom = props.gutterBottom,\n      gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,\n      _props$noWrap = props.noWrap,\n      noWrap = _props$noWrap === void 0 ? false : _props$noWrap,\n      _props$paragraph = props.paragraph,\n      paragraph = _props$paragraph === void 0 ? false : _props$paragraph,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'body1' : _props$variant,\n      _props$variantMapping = props.variantMapping,\n      variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  var themeVariantsClasses = useThemeVariants(_extends({}, props, {\n    align: align,\n    color: color,\n    display: display,\n    gutterBottom: gutterBottom,\n    noWrap: noWrap,\n    paragraph: paragraph,\n    variant: variant,\n    variantMapping: variantMapping\n  }), 'MuiTypography');\n  var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, classes[variant], themeVariantsClasses, className, color !== 'initial' && classes[\"color\".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], display !== 'initial' && classes[\"display\".concat(capitalize(display))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['error', 'inherit', 'initial', 'primary', 'secondary', 'textPrimary', 'textSecondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['block', 'initial', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string]),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);"]},"metadata":{},"sourceType":"module"}